Wireframe/Pseudocode

- Use grid to create ?x? board. TBD: board size
- Randomly assign 'mines' on board. TBD: number of mines
- User will be able to click grids. A clicked grid will have 2 (or 3) states, safe or unsafe.  If the square is unsafe, that means the user has clicked a mine.  The game will end.
	- Squares will recursively check the surrounding area to determine its number value, which will indicate the number of mines in a 1-grid radius.
- Responsive design.

Additional features: Running time, score and calculating score, enabling left click to mark a square as 'safe', safe-click chaining (the board will automatically mark surrouding grids as safe to an undetermined value)

1. Define required constants.
	1.1. Object to hold following keys:
	mine
	reveal
	unclicked
	clicked
	flagged

2. Define state variables.
	Board, time, isPlaying, winner

3. Element caching (storing elements that will be access more than once)
	cellEls, emojis, timeEls

4. Upon loading, the app should...
	4.1 Initialize state variables.
		4.1.1. Initialize board array to represent unclicked squares.
		4.1.2. Initialize random unsafe squares.
	4.2 Render state variables.
		4.2.1. Render the board.
			4.2.1.1. Loop over every element in the board.
				4.2.1.1.1. Set background color/image of current element.
		4.2.2. Render a message.
			4.2.2.1. If winner has won, inform user.
			4.2.2.2. If winner has lost, inform user.
	4.3 Wait for user to click a square.

5. Hande player clicking square.
	5.1 Obtain index of square by extracting index from id assigned to element.
		5.1.1. Count the number of mines adjacent to clicked square.
			5.1.1.1. If the count = 0, check the counts of the adjacent squares recursively.
	
	5.2. If the user clicks a mine, return and end game.
	5.3. If the user clicks a 'clicked' square, return.
	5.3. If winner === W, return. (game over)
	5.5. Set winner variable if they have won.
		5.5.1. Loop through board.
		5.5.2. If there are only safe values on the board, AND there are no more squares that can be clicked, set winner variable.
	5.x Render state to page.

6. Handle player clicking replay button.
	6.1 Initialize state variables and render board.
